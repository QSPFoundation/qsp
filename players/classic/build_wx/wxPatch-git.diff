 include/wx/animate.h         |  4 ++
 include/wx/animdecod.h       |  3 ++
 include/wx/aui/floatpane.h   | 11 ++++++
 include/wx/generic/animate.h | 11 +++++-
 include/wx/gifdecod.h        |  3 ++
 include/wx/htmllbox.h        |  8 +++-
 src/aui/floatpane.cpp        |  3 ++
 src/aui/framemanager.cpp     |  2 +
 src/common/filesys.cpp       |  3 +-
 src/generic/animateg.cpp     | 47 ++++++++++++++++++++++-
 src/generic/scrlwing.cpp     |  6 +++
 src/html/htmlwin.cpp         |  3 +-
 src/html/m_image.cpp         | 89 ++++++++++++++++++++++++++++++++++++++++----
 src/html/m_links.cpp         |  5 ++-
 src/html/winpars.cpp         |  8 +++-
 15 files changed, 190 insertions(+), 16 deletions(-)

diff --git a/include/wx/animate.h b/include/wx/animate.h
index 6243fb4568..b88257abf9 100644
--- a/include/wx/animate.h
+++ b/include/wx/animate.h
@@ -114,11 +114,15 @@ private:
 // include the platform-specific version of the wxAnimationCtrl class
 // ----------------------------------------------------------------------------
 
+// HzD_Byte's hack
+/*
 #if defined(__WXGTK20__) && !defined(__WXUNIVERSAL__)
     #include "wx/gtk/animate.h"
 #else
     #include "wx/generic/animate.h"
 #endif
+*/
+#include "wx/generic/animate.h"
 
 #endif // wxUSE_ANIMATIONCTRL
 
diff --git a/include/wx/animdecod.h b/include/wx/animdecod.h
index 58177e68fd..42451abf5f 100644
--- a/include/wx/animdecod.h
+++ b/include/wx/animdecod.h
@@ -144,6 +144,9 @@ public:
     // the transparent colour for this frame if any or wxNullColour.
     virtual wxColour GetTransparentColour(unsigned int frame) const = 0;
 
+    // HzD_Byte's hack
+    bool IsAnimation() const { return m_nFrames > 1; }
+
     // get global data
     wxSize GetAnimationSize() const { return m_szAnimation; }
     wxColour GetBackgroundColour() const { return m_background; }
diff --git a/include/wx/aui/floatpane.h b/include/wx/aui/floatpane.h
index bf158933b8..f77318576b 100644
--- a/include/wx/aui/floatpane.h
+++ b/include/wx/aui/floatpane.h
@@ -31,6 +31,8 @@
 class WXDLLIMPEXP_AUI wxAuiFloatingFrame : public wxAuiFloatingFrameBaseClass
 {
 public:
+    // HzD_Byte's hack
+    /*
     wxAuiFloatingFrame(wxWindow* parent,
                    wxAuiManager* ownerMgr,
                    const wxAuiPaneInfo& pane,
@@ -39,6 +41,15 @@ public:
                                 wxFRAME_NO_TASKBAR | wxFRAME_FLOAT_ON_PARENT |
                                 wxCLIP_CHILDREN
                    );
+    */
+    wxAuiFloatingFrame(wxWindow* parent,
+                   wxAuiManager* owner_mgr,
+                   const wxAuiPaneInfo& pane,
+                   wxWindowID id = wxID_ANY,
+                   long style = wxSYSTEM_MENU | wxCAPTION |
+                                wxFRAME_NO_TASKBAR | wxFRAME_FLOAT_ON_PARENT | 
+                                wxCLIP_CHILDREN
+                   );
     virtual ~wxAuiFloatingFrame();
     void SetPaneWindow(const wxAuiPaneInfo& pane);
     wxAuiManager* GetOwnerManager() const;
diff --git a/include/wx/generic/animate.h b/include/wx/generic/animate.h
index 818daf890c..2b97aaa521 100644
--- a/include/wx/generic/animate.h
+++ b/include/wx/generic/animate.h
@@ -26,8 +26,13 @@ public:
     wxAnimation(const wxString &name, wxAnimationType type = wxANIMATION_TYPE_ANY)
         { LoadFile(name, type); }
 
+    // HzD_Byte's hack
+    /*
     virtual bool IsOk() const
         { return m_refData != NULL; }
+    */
+    virtual bool IsOk() const
+        { return m_refData != NULL && wx_static_cast(wxAnimationDecoder *, m_refData)->IsAnimation(); }
 
     virtual unsigned int GetFrameCount() const;
     virtual int GetDelay(unsigned int i) const;
@@ -167,7 +172,11 @@ protected:
 
     wxBitmap      m_backingStore;     // The frames are drawn here and then blitted
                                       // on the screen
-
+    // HzD_Byte's hack
+    int m_scalePosX;
+    int m_scalePosY;
+    int m_scaleWidth;
+    int m_scaleHeight;
 private:
     typedef wxAnimationCtrlBase base_type;
     DECLARE_DYNAMIC_CLASS(wxAnimationCtrl)
diff --git a/include/wx/gifdecod.h b/include/wx/gifdecod.h
index f0b84fc4bf..87286b2a09 100644
--- a/include/wx/gifdecod.h
+++ b/include/wx/gifdecod.h
@@ -65,8 +65,11 @@ public:
     virtual long GetDelay(unsigned int frame) const;
 
     // GIFs can contain both static images and animations
+    // HzD_Byte's hack
+    /*
     bool IsAnimation() const
         { return m_nFrames > 1; }
+    */
 
     // load function which returns more info than just Load():
     wxGIFErrorCode LoadGIF( wxInputStream& stream );
diff --git a/include/wx/htmllbox.h b/include/wx/htmllbox.h
index 27c3a36c30..2473d6700d 100644
--- a/include/wx/htmllbox.h
+++ b/include/wx/htmllbox.h
@@ -129,7 +129,8 @@ protected:
     // ensure that the given item is cached
     void CacheItem(size_t n) const;
 
-private:
+    // HzD_Byte's hack
+// private:
     // wxHtmlWindowInterface methods:
     virtual void SetHTMLWindowTitle(const wxString& title);
     virtual void OnHTMLLinkClicked(const wxHtmlLinkInfo& link);
@@ -162,7 +163,8 @@ private:
     // given cell to physical coordinates in the window
     wxPoint CellCoordsToPhysical(const wxPoint& pos, wxHtmlCell *cell) const;
 
-private:
+    // HzD_Byte's hack
+// private:
     // this class caches the pre-parsed HTML to speed up display
     wxHtmlListBoxCache *m_cache;
 
@@ -177,6 +179,8 @@ private:
     // rendering style for the parser which allows us to customize our colours
     wxHtmlListBoxStyle *m_htmlRendStyle;
 
+    // HzD_Byte's hack
+private:
 
     // it calls our GetSelectedTextColour() and GetSelectedTextBgColour()
     friend class wxHtmlListBoxStyle;
diff --git a/src/aui/floatpane.cpp b/src/aui/floatpane.cpp
index 837c0a0aa5..176a0f9316 100644
--- a/src/aui/floatpane.cpp
+++ b/src/aui/floatpane.cpp
@@ -132,10 +132,13 @@ void wxAuiFloatingFrame::SetPaneWindow(const wxAuiPaneInfo& pane)
     // pane.floating_size from inside it so we must also record its original
     // value before doing it.
     const bool hasFloatingSize = pane.floating_size != wxDefaultSize;
+    // HzD_Byte's hack
+    /*
     if (pane.IsFixed())
     {
         SetWindowStyleFlag(GetWindowStyleFlag() & ~wxRESIZE_BORDER);
     }
+    */
 
     if ( hasFloatingSize )
     {
diff --git a/src/aui/framemanager.cpp b/src/aui/framemanager.cpp
index f0c506220d..4a8cd4ebf5 100644
--- a/src/aui/framemanager.cpp
+++ b/src/aui/framemanager.cpp
@@ -2670,6 +2670,8 @@ void wxAuiManager::Update()
                 p.window->Refresh();
                 p.window->Update();
             }
+            // HzD_Byte's hack
+            p.BestSize(p.rect.GetSize());
         }
     }
 
diff --git a/src/common/filesys.cpp b/src/common/filesys.cpp
index 06edca28a2..14663e4857 100644
--- a/src/common/filesys.cpp
+++ b/src/common/filesys.cpp
@@ -632,7 +632,8 @@ wxFileName wxFileSystem::URLToFileName(const wxString& url)
         path = path.Mid(2);
 #endif
 
-    path = wxURI::Unescape(path);
+    // HzD_Byte's hack
+    // path = wxURI::Unescape(path);
 
 #ifdef __WINDOWS__
     // file urls either start with a forward slash (local harddisk),
diff --git a/src/generic/animateg.cpp b/src/generic/animateg.cpp
index dd2adecffc..85391aabb7 100644
--- a/src/generic/animateg.cpp
+++ b/src/generic/animateg.cpp
@@ -276,6 +276,8 @@ void wxAnimationCtrl::Init()
     m_currentFrame = 0;
     m_looped = false;
     m_isPlaying = false;
+    // HzD_Byte's hack
+    m_scalePosX = m_scalePosY = m_scaleWidth = m_scaleHeight = 0;
 
     // use the window background colour by default to be consistent
     // with the GTK+ native version
@@ -337,6 +339,10 @@ void wxAnimationCtrl::SetAnimation(const wxAnimation& animation)
 
     // set new animation even if it's wxNullAnimation
     m_animation = animation;
+    // HzD_Byte's hack
+    wxSizeEvent e;
+    OnSize(e);
+
     if (!m_animation.IsOk())
     {
         DisplayStaticImage();
@@ -438,6 +444,8 @@ bool wxAnimationCtrl::RebuildBackingStoreUpToFrame(unsigned int frame)
 {
     // if we've not created the backing store yet or it's too
     // small, then recreate it
+    // HzD_Byte's hack
+    /*
     wxSize sz = m_animation.GetSize(),
            winsz = GetClientSize();
     int w = wxMin(sz.GetWidth(), winsz.GetWidth());
@@ -449,6 +457,15 @@ bool wxAnimationCtrl::RebuildBackingStoreUpToFrame(unsigned int frame)
         if (!m_backingStore.Create(w, h))
             return false;
     }
+    */
+    wxSize sz = m_animation.GetSize();
+    int w = sz.GetWidth(), h = sz.GetHeight();
+    if (!m_backingStore.IsOk() ||
+        m_backingStore.GetWidth() != w || m_backingStore.GetHeight() != h)
+    {
+        if (!m_backingStore.Create(w, h))
+            return false;
+    }
 
     wxMemoryDC dc;
     dc.SelectObject(m_backingStore);
@@ -581,7 +598,13 @@ void wxAnimationCtrl::DrawCurrentFrame(wxDC& dc)
     wxASSERT( m_backingStore.IsOk() );
 
     // m_backingStore always contains the current frame
-    dc.DrawBitmap(m_backingStore, 0, 0, true /* use mask in case it's present */);
+    // HzD_Byte's hack
+    // dc.DrawBitmap(m_backingStore, 0, 0, true /* use mask in case it's present */);
+    if (m_scaleWidth > 0 && m_scaleHeight > 0)
+    {
+        wxBitmap bitmap(m_backingStore.ConvertToImage().Scale(m_scaleWidth, m_scaleHeight));
+        dc.DrawBitmap(bitmap, m_scalePosX, m_scalePosY, true);
+    }
 }
 
 void wxAnimationCtrl::DisposeToBackground()
@@ -629,7 +652,13 @@ void wxAnimationCtrl::OnPaint(wxPaintEvent& WXUNUSED(event))
         // NOTE: we draw the bitmap explicitly ignoring the mask (if any);
         //       i.e. we don't want to combine the backing store with the
         //       possibly wrong preexisting contents of the window!
-        dc.DrawBitmap(m_backingStore, 0, 0, false /* no mask */);
+        // HzD_Byte's hack
+        // dc.DrawBitmap(m_backingStore, 0, 0, false /* no mask */);
+        if (m_scaleWidth > 0 && m_scaleHeight > 0)
+        {
+            wxBitmap bitmap(m_backingStore.ConvertToImage().Scale(m_scaleWidth, m_scaleHeight));
+            dc.DrawBitmap(bitmap, m_scalePosX, m_scalePosY, false);
+        }
     }
     else
     {
@@ -689,6 +718,20 @@ void wxAnimationCtrl::OnSize(wxSizeEvent &WXUNUSED(event))
             if (!RebuildBackingStoreUpToFrame(m_currentFrame))
                 Stop();     // in case we are playing
         }
+        // HzD_Byte's hack
+        int w, h, srcW, srcH;
+        wxSize srcSize = m_animation.GetSize();
+        GetClientSize(&w, &h);
+        srcW = srcSize.GetWidth();
+        srcH = srcSize.GetHeight();
+        m_scaleWidth = srcW * h / srcH;
+        m_scaleHeight = srcH * w / srcW;
+        if (m_scaleWidth > w)
+            m_scaleWidth = w;
+        else
+            m_scaleHeight = h;
+        m_scalePosX = (w - m_scaleWidth) / 2;
+        m_scalePosY = (h - m_scaleHeight) / 2;
     }
 }
 
diff --git a/src/generic/scrlwing.cpp b/src/generic/scrlwing.cpp
index 4fcb6a17bf..c34de2b419 100644
--- a/src/generic/scrlwing.cpp
+++ b/src/generic/scrlwing.cpp
@@ -608,6 +608,8 @@ void wxScrollHelperBase::HandleOnScroll(wxScrollWinEvent& event)
         m_win->SetScrollPos(wxVERTICAL, m_yScrollPosition);
     }
 
+    // HzD_Byte's hack
+    /*
     if ( needsRefresh )
     {
         m_targetWindow->Refresh(true, GetScrollRect());
@@ -616,6 +618,10 @@ void wxScrollHelperBase::HandleOnScroll(wxScrollWinEvent& event)
     {
         m_targetWindow->ScrollWindow(dx, dy, GetScrollRect());
     }
+    */
+    m_targetWindow->Refresh(true, GetScrollRect());
+    if (!needsRefresh)
+        m_targetWindow->ScrollWindow(dx, dy, GetScrollRect());
 }
 
 int wxScrollHelperBase::CalcScrollInc(wxScrollWinEvent& event)
diff --git a/src/html/htmlwin.cpp b/src/html/htmlwin.cpp
index 01621ddf5d..7b6292548e 100644
--- a/src/html/htmlwin.cpp
+++ b/src/html/htmlwin.cpp
@@ -472,7 +472,8 @@ bool wxHtmlWindow::DoSetPage(const wxString& source)
     // ...and run the parser on it:
     wxClientDC dc(this);
     dc.SetMapMode(wxMM_TEXT);
-    SetBackgroundColour(wxColour(0xFF, 0xFF, 0xFF));
+    // HzD_Byte's hack
+    // SetBackgroundColour(wxColour(0xFF, 0xFF, 0xFF));
     SetBackgroundImage(wxNullBitmap);
 
     m_Parser->SetDC(&dc);
diff --git a/src/html/m_image.cpp b/src/html/m_image.cpp
index 482692b649..b90ba0fdbc 100644
--- a/src/html/m_image.cpp
+++ b/src/html/m_image.cpp
@@ -311,6 +311,9 @@ private:
     wxBitmap           *m_bitmap;
     int                 m_align;
     int                 m_bmpW, m_bmpH;
+    // HzD_Byte's hack
+    wxBitmap            m_cachedBmp;
+    int                 m_bmpMaxW, m_bmpMaxH;
     bool                m_bmpWpercent:1;
     bool                m_bmpHpresent:1;
     bool                m_showFrame:1;
@@ -363,6 +366,8 @@ wxHtmlImageCell::wxHtmlImageCell(wxHtmlWindowInterface *windowIface,
     m_bitmap = NULL;
     m_bmpW   = w;
     m_bmpH   = h;
+    // HzD_Byte's hack
+    m_bmpMaxW = m_bmpMaxH = wxDefaultCoord;
     m_align  = align;
     m_bmpWpercent = wpercent;
     m_bmpHpresent = hpresent;
@@ -394,20 +399,30 @@ wxHtmlImageCell::wxHtmlImageCell(wxHtmlWindowInterface *windowIface,
                     if ( m_gifDecoder->LoadGIF(*s) == wxGIF_OK )
                     {
                         wxImage img;
+                        // HzD_Byte's hack
+                        /*
                         if ( m_gifDecoder->ConvertToImage(0, &img) )
                             SetImage(img);
+                        */
 
                         readImg = false;
 
                         if ( m_gifDecoder->IsAnimation() )
                         {
                             m_gifTimer = new wxGIFTimer(this);
+                            // HzD_Byte's hack
+                            wxSize sz(m_gifDecoder->GetAnimationSize());
+                            m_bmpMaxW = sz.GetWidth();
+                            m_bmpMaxH = sz.GetHeight();
                             long delay = m_gifDecoder->GetDelay(0);
                             if ( delay == 0 )
                                 delay = 1;
                             m_gifTimer->Start(delay, true);
                         }
-                        else
+                        // HzD_Byte's hack
+                        // else
+                        if (m_gifDecoder->ConvertToImage(0, &img)) SetImage(img);
+                        if (!m_gifDecoder->IsAnimation())
                         {
                             wxDELETE(m_gifDecoder);
                         }
@@ -429,6 +444,8 @@ wxHtmlImageCell::wxHtmlImageCell(wxHtmlWindowInterface *windowIface,
         }
         else // input==NULL, use "broken image" bitmap
         {
+            // HzD_Byte's hack
+            /*
             if ( m_bmpW == wxDefaultCoord && m_bmpH == wxDefaultCoord )
             {
                 m_bmpW = 29;
@@ -442,6 +459,9 @@ wxHtmlImageCell::wxHtmlImageCell(wxHtmlWindowInterface *windowIface,
             }
             m_bitmap =
                 new wxBitmap(wxArtProvider::GetBitmap(wxART_MISSING_IMAGE));
+            */
+            wxBitmap missBmp(wxArtProvider::GetBitmap(wxART_MISSING_IMAGE));
+            SetImage(missBmp.ConvertToImage());
         }
     }
     //else: ignore the 0-sized images used sometimes on the Web pages
@@ -459,10 +479,30 @@ void wxHtmlImageCell::SetImage(const wxImage& img)
         ww = img.GetWidth();
         hh = img.GetHeight();
 
+        // HzD_Byte's hack
+        /*
         if ( m_bmpW == wxDefaultCoord)
             m_bmpW = ww;
         if ( m_bmpH == wxDefaultCoord)
             m_bmpH = hh;
+        */
+        if (m_bmpMaxW == wxDefaultCoord)
+            m_bmpMaxW = ww;
+        if (m_bmpMaxH == wxDefaultCoord)
+            m_bmpMaxH = hh;
+        if (m_bmpW == wxDefaultCoord && m_bmpH == wxDefaultCoord)
+        {
+            m_bmpW = m_bmpMaxW;
+            m_bmpH = m_bmpMaxH;
+        }
+        else if (m_bmpW == wxDefaultCoord)
+            m_bmpW = m_bmpMaxW * m_bmpH / m_bmpMaxH;
+        else if (m_bmpH == wxDefaultCoord)
+            m_bmpH = m_bmpMaxH * m_bmpW / m_bmpMaxW;
+        if (ww == m_bmpMaxW && hh == m_bmpMaxH)
+            m_bitmap = new wxBitmap(img);
+        else
+            m_bitmap = new wxBitmap(img.Size(wxSize(m_bmpMaxW, m_bmpMaxH), wxPoint(0, 0)));
 
         // Only scale the bitmap at the rendering stage,
         // so we don't lose quality twice
@@ -474,7 +514,8 @@ void wxHtmlImageCell::SetImage(const wxImage& img)
         }
         else
 */
-            m_bitmap = new wxBitmap(img);
+        // HzD_Byte's hack
+        //     m_bitmap = new wxBitmap(img);
     }
 #endif
 }
@@ -499,7 +540,8 @@ void wxHtmlImageCell::AdvanceAnimation(wxTimer *timer)
     if (m_nCurrFrame == m_gifDecoder->GetFrameCount())
         m_nCurrFrame = 0;
 
-    if ( m_physX == wxDefaultCoord )
+    // HzD_Byte's hack
+    // if ( m_physX == wxDefaultCoord )
     {
         m_physX = m_physY = 0;
         for (wxHtmlCell *cell = this; cell; cell = cell->GetParent())
@@ -518,18 +560,35 @@ void wxHtmlImageCell::AdvanceAnimation(wxTimer *timer)
          m_gifDecoder->ConvertToImage(m_nCurrFrame, &img) )
     {
 #if !defined(__WXMSW__) || wxUSE_WXDIB
+        // HzD_Byte's hack
+        /*
         if ( m_gifDecoder->GetFrameSize(m_nCurrFrame) != wxSize(m_Width, m_Height) ||
              m_gifDecoder->GetFramePosition(m_nCurrFrame) != wxPoint(0, 0) )
+        */
+        if (m_gifDecoder->GetFramePosition(m_nCurrFrame) != wxPoint(0, 0))
         {
-            wxBitmap bmp(img);
+            // HzD_Byte's hack
+            // wxBitmap bmp(img);
+            // wxMemoryDC dc;
+            // dc.SelectObject(*m_bitmap);
+            // dc.DrawBitmap(bmp, m_gifDecoder->GetFramePosition(m_nCurrFrame),
+            //               true /* use mask */);
+            wxBitmap bmp(img.Size(wxSize(m_bmpMaxW, m_bmpMaxH), m_gifDecoder->GetFramePosition(m_nCurrFrame)));
             wxMemoryDC dc;
             dc.SelectObject(*m_bitmap);
-            dc.DrawBitmap(bmp, m_gifDecoder->GetFramePosition(m_nCurrFrame),
-                          true /* use mask */);
+            dc.DrawBitmap(bmp, 0, 0, true);
         }
         else
 #endif
             SetImage(img);
+        // HzD_Byte's hack
+        if (m_Width > 0 && m_Height > 0)
+        {
+            if (m_bitmap->GetWidth() == m_Width && m_bitmap->GetHeight() == m_Height)
+                m_cachedBmp = *m_bitmap;
+            else
+                m_cachedBmp = wxBitmap(m_bitmap->ConvertToImage().Scale(m_Width, m_Height));
+        }
         win->Refresh(img.HasMask(), &rect);
     }
 
@@ -555,6 +614,16 @@ void wxHtmlImageCell::Layout(int w)
         m_Width  = static_cast<int>(m_scale*m_bmpW);
         m_Height = static_cast<int>(m_scale*m_bmpH);
     }
+    // HzD_Byte's hack
+    if (m_Width < 0) m_Width = 0;
+    if (m_Height < 0) m_Height = 0;
+    if (m_bitmap && m_Width > 0 && m_Height > 0)
+    {
+        if (m_bitmap->GetWidth() == m_Width && m_bitmap->GetHeight() == m_Height)
+            m_cachedBmp = *m_bitmap;
+        else
+            m_cachedBmp = wxBitmap(m_bitmap->ConvertToImage().Scale(m_Width, m_Height));
+    }
 
     switch (m_align)
     {
@@ -595,8 +664,11 @@ void wxHtmlImageCell::Draw(wxDC& dc, int x, int y,
         dc.SetBrush(*wxTRANSPARENT_BRUSH);
         dc.SetPen(*wxBLACK_PEN);
         dc.DrawRectangle(x + m_PosX, y + m_PosY, m_Width, m_Height);
-        x++, y++;
+        // HzD_Byte's hack
+        // x++, y++;
     }
+    // HzD_Byte's hack
+    /*
     if ( m_bitmap )
     {
         // We add in the scaling from the desired bitmap width
@@ -616,6 +688,9 @@ void wxHtmlImageCell::Draw(wxDC& dc, int x, int y,
                                  (int) ((y + m_PosY) / (imageScaleY)), true);
         dc.SetUserScale(us_x, us_y);
     }
+    */
+    if (m_cachedBmp.IsOk())
+        dc.DrawBitmap(m_cachedBmp, x + m_PosX, y + m_PosY, true);
 }
 
 wxHtmlLinkInfo *wxHtmlImageCell::GetLink( int x, int y ) const
diff --git a/src/html/m_links.cpp b/src/html/m_links.cpp
index 4dfebdc2e6..9f595b85c5 100644
--- a/src/html/m_links.cpp
+++ b/src/html/m_links.cpp
@@ -84,7 +84,10 @@ TAG_HANDLER_BEGIN(A, "A")
             // set default styles, might get overridden by ApplyStyle
             m_WParser->SetActualColor(m_WParser->GetLinkColor());
             m_WParser->GetContainer()->InsertCell(new wxHtmlColourCell(m_WParser->GetLinkColor()));
-            m_WParser->SetFontUnderlined(true);
+            // HzD_Byte's hack
+            // m_WParser->SetFontUnderlined(true);
+            if (!(tag.HasParam(wxT("CLASS")) && tag.GetParam(wxT("CLASS")).IsSameAs(wxT("PLAIN"), false)))
+                m_WParser->SetFontUnderlined(true);
             m_WParser->GetContainer()->InsertCell(new wxHtmlFontCell(m_WParser->CreateCurrentFont()));
             m_WParser->SetLink(wxHtmlLinkInfo(href, target));
 
diff --git a/src/html/winpars.cpp b/src/html/winpars.cpp
index 1218467ba3..95df9bbb42 100644
--- a/src/html/winpars.cpp
+++ b/src/html/winpars.cpp
@@ -55,6 +55,8 @@ wxHtmlWinParser::wxHtmlWinParser(wxHtmlWindowInterface *wndIface)
     m_whitespaceMode = Whitespace_Normal;
     m_lastWordCell = NULL;
     m_posColumn = 0;
+    // HzD_Byte's hack
+    m_LinkColor.Set(0, 0, 0xFF);
 
     {
         int i, j, k, l, m;
@@ -212,7 +214,8 @@ void wxHtmlWinParser::InitParser(const wxString& source)
 
     m_UseLink = false;
     m_Link = wxHtmlLinkInfo( wxEmptyString );
-    m_LinkColor.Set(0, 0, 0xFF);
+    // HzD_Byte's hack
+    // m_LinkColor.Set(0, 0, 0xFF);
     m_ActualColor.Set(0, 0, 0);
     const wxColour windowColour = wxSystemSettings::GetColour(wxSYS_COLOUR_WINDOW) ;
     m_ActualBackgroundColor = m_windowInterface
@@ -300,6 +303,8 @@ wxFSFile *wxHtmlWinParser::OpenURL(wxHtmlURLType type,
     {
         wxString myfullurl(myurl);
 
+        // HzD_Byte's hack
+        /*
         // consider url as absolute path first
         wxURI current(myurl);
         myfullurl = current.BuildUnescapedURI();
@@ -328,6 +333,7 @@ wxFSFile *wxHtmlWinParser::OpenURL(wxHtmlURLType type,
                 }
             }
         }
+        */
 
         wxString redirect;
         status = m_windowInterface->OnHTMLOpeningURL(type, myfullurl, &redirect);
